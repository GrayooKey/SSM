<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">

        <!-- 1、负责扫描带有注解的组件,并注册在spring容器中,之后将由spring来管理这些bean的生命周期,以此实现 控制反转 和 依赖注入 -->
        <context:component-scan base-package="com.base.user">
                <!-- 因为在 spring-mvc.xml 配置文件中已经将带有@Controller注解的组件扫描的,故此处去除对controller 的重复扫描-->
                <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        </context:component-scan>


        <!-- 2、数据源 -->
        <!-- 使用 c3p0连接池技术 来加载驱动，建立连接，可通过该对象获取数据库连接 -->
        <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">         <!-- 数据源的bean的id是为了方便  mybatis核心对象(SqlSessionFactory) 以及 事务管理器(transactionManager)的引用 -->
                <!-- 基本配置 -->
                <property name="driverClass" value="com.mysql.jdbc.Driver"/>
                <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/ssm?useUnicode=true&amp;characterEncoding=UTF-8"/>
                <property name="user" value="root"/>
                <property name="password" value="123456"/>
                <!-- 其他配置 -->
                <property name="initialPoolSize" value="3"/>   <!-- 初始化时连接池中的连接数量 -->
                <property name="minPoolSize" value="3"/>       <!-- 连接池中保留的最小连接数 -->
                <property name="maxPoolSize" value="15"/>      <!-- 连接池中保留的最大连接数 -->
                <property name="acquireIncrement" value="3"/>  <!-- 获得连接的增量:当连接池中的连接耗尽时,c3p0一次同时获取的连接数,Default: 3 -->
                <property name="maxStatements" value="8"/>                      <!-- 控制数据源内加载的PreparedStatements数量。如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->
                <property name="maxStatementsPerConnection" value="5"/>         <!-- maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。Default: 0 -->
                <property name="maxIdleTime" value="1800"/>     <!-- 最大空闲时间,1800秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
        </bean>


        <!-- 3、mybatis的核心对象 SqlSessionFactory  -->
        <bean id="SqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">          <!-- mybatis的核心对象bean的id是为了方便 映射扫描器(MapperScannerConfigurer)的引用 -->
                <property name="dataSource" ref="dataSource"/>                          <!-- 引用数据源 dataSource, 这里是引用上面配置的c3p0 -->
                <property name="configLocation" value="classpath:mybatis-config.xml"/>  <!-- 引用mybatis的配置文件,注:由于spring和mybatis可以完美整合,有时可以省略mybatis的配置文件 -->
                <property name="mapperLocations" value="classpath:UserMapper.xml"/>     <!-- 自动扫描mapping.xml 映射文件 -->
        </bean>

        <!-- 4、映射扫描配置器 MapperScannerConfigurer -->
        <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
                <property name="basePackage" value="com.base.user.dao"/>                        <!-- 使用扫描包的方式加载mapper的代理对象,即dao层接口 -->
                <property name="sqlSessionFactoryBeanName" value="SqlSessionFactory"/>          <!-- 设置mybats核心对象(SqlSessionFactory) -->
        </bean>


        <!-- 5、事务管理器 transactionManager -->
        <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">         <!-- 事务管理器的bean的id是为了设置事务可以通过注解来启动时方便引用事务管理器 -->
                <property name="dataSource" ref="dataSource"/>          <!-- 引用数据源 dataSource, 这里是引用上面配置的c3p0 -->
        </bean>

        <!-- 6、设置可以使用注解( @Transactional ) 来开启事务 -->
       <!-- <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>-->
</beans>